const {REST, Routes} = require('discord.js');
const fs = require('fs');
const { Client, GatewayIntentBits, PermissionsBitField, ChannelType, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, MessageCollector } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers] });
let config = require('./Config/config.json');
/*{
    // console.log(interaction.options.get('number').value); // –≤—ã–≤–æ–¥ –≤—Ç–æ—Ä–æ–≤–æ –ø–∞—Ä–∞–º–µ—Ç–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
}*/

function CreateEmbedBuilder()
{
    const message = new EmbedBuilder()
        .setColor('#FA747D')
        .setTitle("–¢–∏–∫–µ—Ç—ã")
        .setAuthor({name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'})
        .setTitle('–°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π')
        .setDescription(`–î–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º`)
    return message;
}

function CreateButtons()
{
    const button_1 = new ButtonBuilder()
        .setCustomId('createticket')
        .setLabel("—Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üñäÔ∏è')
    return button_1;
}

function checkRole(interaction) 
{
    for (let i = 0; i <= interaction.member._roles.length; i++) {
        for (let j = 0; j < config.roleImmunityId.length; j++) {
            if (interaction.member._roles[i] == config.roleImmunityId[j]) {
                return 1;
            }
        }
    }
    return 0;
}

const commands = [
    {
        name: 'ticket',
        description: '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ä—Ç',
        description_localizations: {'ru': "–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ä—Ç", 'en-US': "–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ä—Ç"},
    }
];

const rest = new REST({ version: '10' }).setToken(config.Token);

(async () => {
    try {
        console.log('–ù–∞—á–∞–ª –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (/).');
        await rest.put(Routes.applicationCommands(config.id_bot), { body: commands });
        console.log('–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (/) –∫–æ–º–∞–Ω–¥—ã.');
        setTimeout(() => {
            const channel = client.channels.cache.get("1056178099127058442");
            const message = CreateEmbedBuilder();
            const button_1 = CreateButtons();
            channel.send({embeds: [message], components: [new ActionRowBuilder().addComponents(button_1)], ephemeral: true});
        }, 15000);

        // setTimeout(PizdaHuy(), 15000);
        
    } catch (error) {
      console.error(error);
    }
})();

client.on('ready', async () => {
    console.log(`–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ ${client.user.tag}!`);
});


client.on('interactionCreate', async (interaction) => {
    if (!interaction.isChatInputCommand()) return;
    // console.log('Dvij');
    // console.log(interaction);

    const guild = client.guilds.cache.get(config.Guild_id);
    const channel_ru = guild.channels.cache.get(config.channel_ru_ticket_id);
    try {
        if(checkRole(interaction)){
            if (interaction.commandName === 'ticket') {
                // const message = new EmbedBuilder()
                //     .setColor('#FA747D')
                //     .setTitle("–¢–∏–∫–µ—Ç—ã")
                //     .setAuthor({name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'})
                //     .setTitle('–°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π')
                //     .setDescription(`
                //         –î–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                //     `)

                // const button_1 = new ButtonBuilder()
                //     .setCustomId('createticket')
                //     .setLabel("—Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
                //     .setStyle(ButtonStyle.Danger)
                //     .setEmoji('üì•')
                const message = CreateEmbedBuilder();
                const button_1 = CreateButtons();
                interaction.reply({embeds: [message], components: [new ActionRowBuilder().addComponents(button_1)], ephemeral: true});

            }
        }else{
            await interaction.reply({content: `–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!`, ephemeral: true});
        }

        if (!interaction.isButton()) {
            const filter = i => i.customId === 'createticket' && i.customId === 'closeticket';

            const collector = interaction.channel.createMessageComponentCollector({filter});

            collector.on('collect', async i => {
                if (i.customId === 'createticket') {
                    let Buffery = config.count_ticket;
                    while(Buffery.toString().length < 4)
                    {
                        Buffery = '0' + Buffery;
                    }

                    guild.channels.create({
                        name: `–¢–∏–∫–µ—Ç-#${Buffery}`,
                        type: ChannelType.GuildText,
                        permissionOverwrites: [
                            {
                                id: guild.roles.everyone,
                                deny: [
                                    PermissionsBitField['Flags'].ManageChannels,
                                    PermissionsBitField['Flags'].CreateInstantInvite,
                                    PermissionsBitField['Flags'].ChangeNickname,
                                    PermissionsBitField['Flags'].SendTTSMessages,
                                    PermissionsBitField['Flags'].SendMessagesInThreads,
                                    PermissionsBitField['Flags'].UseApplicationCommands,
                                    PermissionsBitField['Flags'].SendMessages,
                                    PermissionsBitField['Flags'].ReadMessageHistory,
                                    PermissionsBitField['Flags'].ViewChannel,
                                    PermissionsBitField['Flags'].MentionEveryone
                                ]
                            },
                            {
                                id: i.user.id,
                                allow: [
                                    PermissionsBitField['Flags'].UseApplicationCommands,
                                    PermissionsBitField['Flags'].SendMessages,
                                    PermissionsBitField['Flags'].ReadMessageHistory,
                                    PermissionsBitField['Flags'].ViewChannel
                                ],
                                deny: [
                                    PermissionsBitField['Flags'].ManageChannels,
                                    PermissionsBitField['Flags'].CreateInstantInvite,
                                    PermissionsBitField['Flags'].ChangeNickname,
                                    PermissionsBitField['Flags'].SendTTSMessages,
                                    PermissionsBitField['Flags'].SendMessagesInThreads,
                                    PermissionsBitField['Flags'].MentionEveryone
                                ]
                            },
                            {
                                id: config.id_bot,
                                allow: [
                                    PermissionsBitField['Flags'].ViewChannel,
                                    PermissionsBitField['Flags'].ReadMessageHistory,
                                    PermissionsBitField['Flags'].SendMessages
                                ]
                            },
                            {
                                id: guild.roles.cache.get(config.ticket_admin_ru).id,
                                allow: [
                                    PermissionsBitField['Flags'].ViewChannel,
                                    PermissionsBitField['Flags'].ReadMessageHistory,
                                    PermissionsBitField['Flags'].SendMessages
                                ],
                                deny: [
                                    PermissionsBitField['Flags'].CreateInstantInvite,
                                    PermissionsBitField['Flags'].ChangeNickname,
                                    PermissionsBitField['Flags'].MentionEveryone
                                ]
                            }
                        ],
                        parent: client.channels.cache.find(ct => ct.name.startsWith("—Ç–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è")).id,
                      })
                      .then(new_channel => {
                        i.reply({content: `–í–∞—à —á–∞—Ç ${new_channel.name} —Å–æ–∑–¥–∞–Ω`, ephemeral: true})
                        config.count_ticket++;
                        Rewriting(config);


                        const message = new EmbedBuilder()
                        .setColor('#FA747D')
                        .setTitle("–¢–∏–∫–µ—Ç—ã")
                        .setAuthor({name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'})
                        .setTitle('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                        .setDescription(`–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç`)

                        const button_2 = new ButtonBuilder()
                            .setCustomId('closeticket')
                            .setLabel("–∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
                            .setStyle(ButtonStyle.Success)
                            .setEmoji('‚ùå')

                        new_channel.send({embeds: [message], components: [new ActionRowBuilder().addComponents(button_2)]});
                        
                      })
                      .catch(console.error);
                } else if (i.customId === 'closeticket') {
                    console.log('–∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç');
                }
            })


        }
    } catch (error) {
        console.error(error);
    }
    
});

client.login(config.Token);

function Rewriting(newJson)
{
    fs.writeFileSync('./Config/config.json', JSON.stringify(newJson));
}